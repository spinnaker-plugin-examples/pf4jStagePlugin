import org.yaml.snakeyaml.Yaml

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
  }
}

apply plugin: "io.spinnaker.plugin.service-extension"
apply plugin: "maven-publish"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-spring"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
  maven { url "http://dl.bintray.com/spinnaker/spinnaker/" }

  // Used for testing against the Google product releases.
  maven { url "https://spinnaker-releases.bintray.com/jars" }
}

spinnakerPlugin {
  serviceName = "orca"
  pluginClass = "io.armory.plugin.stage.wait.random.RandomWaitPlugin"
  requires="orca>=0.0.0"
}

dependencies {
  compileOnly "org.pf4j:pf4j:${pf4jVersion}"
  compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  compileOnly "com.netflix.spinnaker.kork:kork-plugins-api:${korkVersion}"
  compileOnly "com.netflix.spinnaker.orca:orca-api:${orcaVersion}"
  kapt "org.pf4j:pf4j:${pf4jVersion}"

  withOrcaVersion {
    testImplementation(platform("com.netflix.spinnaker.orca:orca-bom:${it}"))
  }
  testImplementation "com.netflix.spinnaker.orca:orca-api"
  testImplementation "com.netflix.spinnaker.orca:orca-api-tck"
  testImplementation "com.netflix.spinnaker.orca:orca-queue"
  testImplementation "com.netflix.spinnaker.kork:kork-plugins-tck"

  testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
  testImplementation "io.strikt:strikt-core:0.22.1"
  testImplementation "dev.minutest:minutest:1.10.0"
  testImplementation "io.mockk:mockk:1.9.3"
  testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
  testImplementation "javax.servlet:javax.servlet-api:4.0.1"

  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.0"
  testRuntime "org.junit.platform:junit-platform-launcher:1.4.0"
  testRuntime "org.junit.platform:junit-platform-commons:1.5.2"
}

compileTestKotlin {
  kotlinOptions {
    languageVersion = "1.3"
    jvmTarget = "1.8"
  }
}

tasks.withType(Test) {
  useJUnitPlatform()
}

def withOrcaVersion(Closure<String> cb) {
  if (hasProperty("testSpinnakerVersion")) {
    def bom = new URL("https://storage.googleapis.com/halconfig/bom/${property("testSpinnakerVersion")}.yml").text
    cb(new Yaml().load(bom).services.orca.version)
  } else {
    cb(property("orcaVersion"))
  }
}
